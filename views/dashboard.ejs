<style>
.message{
    padding:0px;
    margin:0px;
}
</style>

<h4>Hei, <span id="username"><%= username %></span>!</h4>
<div style="max-height: 450px; overflow-y: scroll;" id="output">
</div>
<form id="chat-form">
    <div class="input-group mt-3">
        <input type="text" class="form-control form-control-sm" autocomplete="off" placeholder="Skriv beskjed..." id="text">
        <span class="input-group-btn">
            <input type="submit" class="btn btn-primary btn-sm" value="Send">
        </span>
    </div>
</form>
<input type="file" id="uploadfile" class="btn btn-sm" name="file" accept="image/x-png,image/gif,image/jpeg">
<br><br>
<div class="row">
    <div class="col">
        <p>Disse er p√•logget:</p>
        <ul id="user-list">
        </ul>
    </div>
    <div class="col">
        <p>Chat rom navn:</p>
        <p id="room-name"></p>
    </div>
</div>

    

<a style="float:right;" href="/users/logout" class="btn btn-danger">Logg ut</a>
<br><br>
<hr>
<script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.9.3/qs.min.js" integrity="sha256-lSPkSu/D04IeqWOhTgTf5tLzNFEc37oNE9ysGS9PdK4=" crossorigin="anonymous"></script>
<script src="../socket.io/socket.io.js"></script>
<script>
const chatForm = document.getElementById("chat-form");
let chatMessages = document.getElementById("output");
let userList = document.getElementById("user-list");
let roomName = document.getElementById("room-name");

const {username, room } = Qs.parse(location.search, {
    ignoreQueryPrefix: true
})

const socket = io();

socket.emit("joinRoom", {username, room});

//get room and users

socket.on("roomUsers" ,({room, users})=>{
    outputRoomName(room);
    outputUsers(users);
    console.log(room, users);

})
socket.on("base64 file back", (data) =>{
    outputImage(data);
    console.log(data);

    chatMessages.scrollTop = chatMessages.scrollHeight;
})



socket.on("message", (message) => {
    outputMessage(message);

    chatMessages.scrollTop = chatMessages.scrollHeight;
})
// image submit
$('#uploadfile').bind('change', function(e){
    var data = e.originalEvent.target.files[0];
    readThenSendFile(data);    
});

function readThenSendFile(data){

    var reader = new FileReader();
    reader.onload = function(evt){
        var msg ={};
        msg.file = evt.target.result;
        msg.filename = data.name;
        socket.emit('base64 file', msg);
    };
    reader.readAsDataURL(data);
}
//message submit
chatForm.addEventListener("submit", (e) => {
    e.preventDefault();

    const msg = document.getElementById("text").value;

    socket.emit("chatMessage", msg);

    document.getElementById("text").value = "";
    document.getElementById("text").focus();
})

function outputMessage(message){
    const div = document.createElement("div");
    div.classList.add('message');
    div.innerHTML = `<p style="margin-bottom:0px; font-size:13px; padding:0px; marign:0px; background-color:lightblue; class="meta">${message.text} </p>
    <small style="font-size:10px;  margin:0px; padding:0px;" class="text">${message.username} klokken: ${message.time}</p>`;
    document.getElementById("output").appendChild(div);
}

function outputImage(data){
    const div = document.createElement("div");
    div.classList.add('message');
    div.innerHTML = `<p style=" background-color:lightblue; font-size:14px; padding:0px; marign:0px; class="meta"><img src="${data.file}" style="width:200px;"> </p>
    <small style="font-size:11px; margin:0px; padding:0px;" class="text">${data.username} har send: ${data.filename}</p>`;
    document.getElementById("output").appendChild(div);
        
}

function outputUsers(users) {
  userList.innerHTML = `
    ${users.map(user => `<li>${user.username}</li>`).join('')}
  `;
}
function outputRoomName(room){
    roomName.innerText = room;
}

</script>